trigger:
- develop

pool:
  vmImage: ubuntu-20.04

variables:
- group: "ibm-cloud"
- group: "dev-frontend"

steps:
- checkout: self

- task: Bash@3
  displayName: 'env-config'
  inputs:
    targetType: 'inline'
    script: |
      cat <<EOF > public/env-config.js
      window._env_ = {
        REACT_APP_URL_BACKEND: '$(REACT_APP_URL_BACKEND)'
      }
      EOF
      cat public/env-config.js

- task: Bash@3
  displayName: 'yarn install'
  inputs:
    targetType: 'inline'
    script: |
      yarn install

- task: Bash@3
  displayName: 'yarn build'
  inputs:
    targetType: 'inline'
    script: |
      yarn build

- task: Bash@3
  displayName: 'Install ibmcloud'
  env:
    IC_API_KEY: $(IC_API_KEY)
  inputs:
    targetType: 'inline'
    script: |
      curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
      ibmcloud config --check-version=false
      ibmcloud login --apikey $IC_API_KEY -r $IBM_REGION -g $IBM_GROUP
      ibmcloud plugin install -f -r "IBM Cloud" infrastructure-service

- task: Bash@3
  displayName: 'Create SG rule'
  inputs:
    targetType: 'inline'
    script: |
      REMOTE=$(curl -s ifconfig.me)
      ibmcloud is sg-rulec $IBM_SG inbound tcp --vpc $IBM_VPC --remote $REMOTE --port-min 22 --port-max 22
      SGRULE=$(ibmcloud is sg-rules $IBM_SG --vpc $IBM_VPC --output JSON | jq -r .[-1].id)
      echo "##vso[task.setvariable variable=SGRULE]${SGRULE}"

- task: CopyFilesOverSSH@0
  displayName: 'Copy files over ssh'
  inputs:
    sshEndpoint: $(SSHServiceConnection)
    sourceFolder: 'build'
    contents: |
      **
      !node_modules/**
    targetFolder: '$(TargetFolder)'
    cleanTargetFolder: true
    readyTimeout: '20000'
    failOnEmptySource: true

- task: Bash@3
  displayName: 'Delete SG rule'
  condition: ne(variables.SGRULE, '')
  inputs:
    targetType: 'inline'
    script: |
      ibmcloud is sg-ruled $IBM_SG $(SGRULE) --vpc $IBM_VPC --force